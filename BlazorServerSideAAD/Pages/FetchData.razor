@page "/fetchdata"

@using BlazorServerSideAAD.Data
@inject WeatherForecastService ForecastService
@inject IHttpClientFactory HttpClientFactory
@inject Microsoft.Identity.Web.ITokenAcquisition TokenAcquisitionService
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Hello @userDisplayName!!!!</h1>
    <table class="table">
        <thead>
            <tr>
                <th>Subject</th>
                <th>Sender</th>
                <th>Received Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var mail in messages)
            {
                <tr>
                    <td>@mail.Subject</td>
                    <td>@mail.Sender</td>
                    <td>@mail.ReceivedTime</td>
                </tr>

            }
        </tbody>
    </table>
    <h2>Azure tenants</h2>
        <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Id</th>
                <th>Default domain</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in tenants)
            {
                <tr>
                    <td>@t.DisplayName</td>
                    <td>@t.TenantId</td>
                    <td>@t.DefaultDomain</td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private string userDisplayName;
    private List<MailMessage> messages = new List<MailMessage>();
        private List<Tenant> tenants = new List<Tenant>();
    private HttpClient _httpClient;
    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient();
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        var graphToken = "";
        var azureRestToken = "";
        
        try
        {
            graphToken = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { "User.Read", "Mail.Read" });
            azureRestToken = await TokenAcquisitionService.GetAccessTokenForUserAsync(new string[] { "https://management.azure.com//user_impersonation" });
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }

        //if (string.IsNullOrWhiteSpace(graphToken) || ) { return; }

        // make API call
        _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", graphToken);
        var dataRequest = await _httpClient.GetAsync("https://graph.microsoft.com/beta/me");

        if (dataRequest.IsSuccessStatusCode)
        {
            var userData = System.Text.Json.JsonDocument.Parse(await dataRequest.Content.ReadAsStreamAsync());
            userDisplayName = userData.RootElement.GetProperty("displayName").GetString();
        }

        var mailRequest = await _httpClient.GetAsync("https://graph.microsoft.com/beta/me/messages?$select=subject,receivedDateTime,sender&$top=10");

        if (mailRequest.IsSuccessStatusCode)
        {
            var mailData = System.Text.Json.JsonDocument.Parse(await mailRequest.Content.ReadAsStreamAsync());
            var messagesArray = mailData.RootElement.GetProperty("value").EnumerateArray();

            foreach (var m in messagesArray)
            {
                var message = new MailMessage();
                message.Subject = m.GetProperty("subject").GetString();
                message.Sender = m.GetProperty("sender").GetProperty("emailAddress").GetProperty("address").GetString();
                message.ReceivedTime = m.GetProperty("receivedDateTime").GetDateTime();
                messages.Add(message);
            }
        }

         _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", azureRestToken);
        var azureSubscriptionRequest = await _httpClient.GetAsync("https://management.azure.com/tenants?api-version=2020-01-01");

        if (azureSubscriptionRequest.IsSuccessStatusCode)
        {
            var tenantData = System.Text.Json.JsonDocument.Parse(await azureSubscriptionRequest.Content.ReadAsStreamAsync());
            var tenantArray = tenantData.RootElement.GetProperty("value").EnumerateArray();

            tenants = tenantArray.Select(x => new Tenant() {
                DefaultDomain = x.GetProperty("defaultDomain").GetString(),
                DisplayName = x.GetProperty("displayName").GetString(),
                TenantId = x.GetProperty("tenantId").GetString()
            }).ToList();
        }
    }

    public class MailMessage
    {
        public string Subject;
        public string Sender;
        public DateTime ReceivedTime;
    }

    public class Tenant {
        public string TenantId;
        public string DefaultDomain;
        public string DisplayName;
    }

}